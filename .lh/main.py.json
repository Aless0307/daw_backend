{
    "sourceFile": "main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1745110834188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745111135128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,11 @@\n from voice_processing import router as voice_router\n from groq_utils import router as groq_router\n from azure_storage import get_azure_status, verify_azure_storage, reset_connection\n from routes import accessibility  # A√±adir esta l√≠nea\n-from insightface.app import FaceAnalysis\n+from face_model import face_analyzer\n \n+\n # Configurar logger antes de importar m√≥dulos\n logging.basicConfig(\n     level=logging.INFO,  # Usar INFO como nivel base\n     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n"
                },
                {
                    "date": 1745111287966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,10 @@\n from voice_processing import router as voice_router\n from groq_utils import router as groq_router\n from azure_storage import get_azure_status, verify_azure_storage, reset_connection\n from routes import accessibility  # A√±adir esta l√≠nea\n-from face_model import face_analyzer\n+from insightface.app import FaceAnalysis\n \n-\n # Configurar logger antes de importar m√≥dulos\n logging.basicConfig(\n     level=logging.INFO,  # Usar INFO como nivel base\n     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n"
                },
                {
                    "date": 1745111308124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,15 +209,8 @@\n     }\n \n \n \n-# Global: cargamos el modelo facial solo una vez\n-logger.info(\"üß† Cargando modelo de reconocimiento facial...\")\n-face_analyzer = FaceAnalysis(providers=['CPUExecutionProvider'])\n-face_analyzer.prepare(ctx_id=0, det_size=(640, 640))\n-logger.info(\"‚úÖ Modelo facial cargado exitosamente\")\n-\n-\n if __name__ == \"__main__\":\n     import uvicorn\n     uvicorn.run(\n         \"main:app\",\n"
                }
            ],
            "date": 1745110834187,
            "name": "Commit-0",
            "content": "# daw_backend/main.py\nfrom fastapi import FastAPI, Request, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import JSONResponse\nimport time\nimport logging\nimport os\nimport sys\nfrom config import (\n    ALLOWED_ORIGINS,\n    PRODUCTION_URL,\n    GROQ_API_KEY,\n    REQUEST_TIMEOUT,\n    ENVIRONMENT,\n    IS_PRODUCTION,\n    CORS_CONFIG,\n    PORT\n)\nfrom auth import router as auth_router\nfrom voice_processing import router as voice_router\nfrom groq_utils import router as groq_router\nfrom azure_storage import get_azure_status, verify_azure_storage, reset_connection\nfrom routes import accessibility  # A√±adir esta l√≠nea\nfrom insightface.app import FaceAnalysis\n\n# Configurar logger antes de importar m√≥dulos\nlogging.basicConfig(\n    level=logging.INFO,  # Usar INFO como nivel base\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.StreamHandler(stream=sys.stdout)  # Forzar salida a stdout para Railway\n    ]\n)\n\n# Silenciar los logs espec√≠ficos de Numba y otros m√≥dulos ruidosos\nfor noisy_logger in ['numba', 'numba.core', 'numba.core.byteflow', 'matplotlib', 'PIL']:\n    logging.getLogger(noisy_logger).setLevel(logging.WARNING)\n\n# Configurar el logger para la aplicaci√≥n principal\nlogger = logging.getLogger(\"main\")\nlogger.setLevel(logging.INFO)\n\n# Log de informaci√≥n de inicio\nlogger.error(\"=\" * 50)\nlogger.error(\"INICIANDO APLICACI√ìN EN RAILWAY\")\nlogger.error(f\"Python versi√≥n: {sys.version}\")\nlogger.error(f\"Argumentos: {sys.argv}\")\nlogger.error(f\"Directorio de trabajo: {os.getcwd()}\")\nlogger.error(f\"Variables de entorno: RAILWAY_ENVIRONMENT={os.environ.get('RAILWAY_ENVIRONMENT')}\")\nlogger.error(\"=\" * 50)\n\napp = FastAPI(\n    title=\"DAW Backend API\",\n    description=\"API para el proyecto DAW\",\n    version=\"1.0.0\"\n)\n\n# Configurar CORS\napp.add_middleware(\n    CORSMiddleware,\n    **CORS_CONFIG\n)\n\n# Incluir las rutas de accesibilidad\napp.include_router(accessibility.router, prefix=\"/api\", tags=[\"accessibility\"])\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"\n    Ruta de healthcheck para Railway.\n    Siempre devuelve 200 OK sin realizar comprobaciones intensivas.\n    \"\"\"\n    # Para el healthcheck, simplemente devuelve OK sin verificar servicios\n    # para evitar problemas durante el despliegue\n    return {\n        \"status\": \"healthy\",\n        \"environment\": ENVIRONMENT,\n        \"timestamp\": time.time()\n    }\n\n@app.get(\"/\")\nasync def root():\n    \"\"\"\n    Ruta principal que tambi√©n sirve como healthcheck\n    \"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"message\": \"API de DAW funcionando correctamente\",\n        \"environment\": ENVIRONMENT,\n        \"is_production\": IS_PRODUCTION,\n        \"services\": {\n            \"azure_storage\": get_azure_status(),\n            \"groq_api\": {\"available\": bool(GROQ_API_KEY)}\n        }\n    }\n\n# Middleware para medir tiempo de procesamiento y logging\n@app.middleware(\"http\")\nasync def log_requests(request: Request, call_next):\n    start_time = time.time()\n    \n    # Obtener detalles de la solicitud\n    path = request.url.path\n    method = request.method\n    logger.info(f\"üì• {method} {path}\")\n    \n    # Establecer timeout m√°s largo para rutas relacionadas con voz\n    timeout = 60  # Default 60 segundos\n    if '/voice/' in path or '/login-voice' in path:\n        timeout = 240  # 4 minutos para rutas de voz en lugar de 2\n        logger.info(f\"‚è±Ô∏è Timeout extendido a {timeout}s para ruta de voz\")\n    \n    try:\n        # Procesar la solicitud con timeout\n        import asyncio\n        \n        # Crear una tarea para procesar la solicitud\n        async def process_request():\n            return await call_next(request)\n        \n        # Ejecutar con timeout\n        try:\n            response = await asyncio.wait_for(process_request(), timeout=timeout)\n            \n            # Calcular tiempo de procesamiento\n            process_time = time.time() - start_time\n            logger.info(f\"‚úÖ {method} {path} completado en {process_time:.2f}s - Status: {response.status_code}\")\n            \n            return response\n        except asyncio.TimeoutError:\n            # Si el procesamiento toma demasiado tiempo\n            process_time = time.time() - start_time\n            logger.error(f\"‚è±Ô∏è Timeout en {method} {path} despu√©s de {process_time:.2f}s\")\n            \n            # Respuesta especial para timeout\n            return JSONResponse(\n                status_code=504,\n                content={\n                    \"detail\": \"La solicitud tard√≥ demasiado en procesarse. Por favor, intente m√°s tarde.\"\n                }\n            )\n            \n    except Exception as e:\n        # Para otras excepciones\n        process_time = time.time() - start_time\n        error_msg = str(e)\n        logger.error(f\"‚ùå Error en {method} {path}: {error_msg}\")\n        \n        # Verificar si es un error relacionado con Azure Storage\n        if \"azure_storage\" in error_msg.lower() or \"container_client\" in error_msg.lower():\n            logger.error(\"‚ö†Ô∏è Error relacionado con Azure Storage - Verificando estado...\")\n            \n            return JSONResponse(\n                status_code=503,\n                content={\n                    \"detail\": \"El servicio de almacenamiento en la nube est√° temporalmente no disponible. Por favor, intente m√°s tarde.\"\n                }\n            )\n            \n        # Error gen√©rico para otras excepciones\n        return JSONResponse(\n            status_code=500,\n            content={\n                \"detail\": \"Se produjo un error en el servidor. Por favor, intente m√°s tarde.\"\n            }\n        )\n\n# Incluir routers\napp.include_router(auth_router, prefix=\"/auth\", tags=[\"auth\"])\napp.include_router(voice_router, prefix=\"/voice\", tags=[\"voice\"])\napp.include_router(groq_router, prefix=\"/groq\", tags=[\"groq\"])\n\n# Ruta para verificar el estado de la API\n@app.get(\"/status\")\nasync def check_status():\n    return {\n        \"status\": \"online\",\n        \"azure_storage\": get_azure_status()\n    }\n\n# Ruta para verificar y reintentar la conexi√≥n a Azure Storage\n@app.post(\"/admin/reconnect-azure\")\nasync def reconnect_azure():\n    \"\"\"Intenta reconectar a Azure Storage\"\"\"\n    success = verify_azure_storage()\n    status = get_azure_status()\n    \n    if success:\n        return {\n            \"message\": \"Conexi√≥n a Azure Storage establecida correctamente\",\n            \"status\": status\n        }\n    else:\n        return JSONResponse(\n            status_code=503,\n            content={\n                \"message\": \"No se pudo establecer conexi√≥n a Azure Storage\",\n                \"status\": status\n            }\n        )\n\n# Ruta para reiniciar la conexi√≥n a Azure Storage\n@app.post(\"/admin/reset-azure\")\nasync def reset_azure():\n    \"\"\"Reinicia la conexi√≥n a Azure Storage\"\"\"\n    reset_connection()\n    return {\n        \"message\": \"Conexi√≥n a Azure Storage reiniciada correctamente\"\n    }\n\n\n\n# Global: cargamos el modelo facial solo una vez\nlogger.info(\"üß† Cargando modelo de reconocimiento facial...\")\nface_analyzer = FaceAnalysis(providers=['CPUExecutionProvider'])\nface_analyzer.prepare(ctx_id=0, det_size=(640, 640))\nlogger.info(\"‚úÖ Modelo facial cargado exitosamente\")\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\n        \"main:app\",\n        host=\"0.0.0.0\",\n        port=PORT,\n        reload=not IS_PRODUCTION,\n        workers=1,\n        timeout_keep_alive=75\n    )\n\n"
        }
    ]
}